<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog posts on Declaration of VAR</title>
    <link>https://retifrav.github.io/blog/</link>
    <description>Recent content in Blog posts on Declaration of VAR</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>retif</copyright>
    <lastBuildDate>Sat, 24 Dec 2022 17:21:20 +0100</lastBuildDate><atom:link href="https://retifrav.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Qt –Ω–∞ –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö</title>
      <link>https://retifrav.github.io/blog/2022/12/24/qt-on-mcu-ru/</link>
      <pubDate>Sat, 24 Dec 2022 17:21:20 +0100</pubDate>
      
      <guid>https://retifrav.github.io/blog/2022/12/24/qt-on-mcu-ru/</guid>
      <description>&lt;p&gt;–≠—Ç–∞ —Å—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–≤–∞–ª–∞—Å—å –∫–∞–∫ –ø–µ—Ä–µ–≤–æ–¥ &lt;a href=&#34;https://blog.qt.io/blog/2018/05/03/qt-microncontrollers-mcu/&#34;&gt;–ø–æ—Å—Ç–∞&lt;/a&gt; (&lt;em&gt;–∫–æ—Ç–æ—Ä—ã–π –ø–æ—á–µ–º—É-—Ç–æ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω&lt;/em&gt;) –∏–∑ –±–ª–æ–≥–∞ Qt –ø—Ä–æ –∑–∞–ø—É—Å–∫ Qt –Ω–∞ –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ &lt;a href=&#34;https://habr.com/&#34;&gt;–•–∞–±—Ä–µ&lt;/a&gt;. –ù–æ –ù–õ–û —Å–∫–∞–∑–∞–ª–æ, —á—Ç–æ —Å—Ç–∞—Ç—å—è —Ä–µ–∫–ª–∞–º–Ω–∞—è, –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–µ –¥–∞–ª–æ.&lt;/p&gt;
&lt;img class=&#34;image-post&#34; src=&#34;https://retifrav.github.io/blog/2022/12/24/qt-on-mcu/images/qt-on-mcu.jpg&#34; alt=&#34;Qt on MCU&#34;&gt;
&lt;p&gt;–Ø –±—ã –Ω–µ —Å–∫–∞–∑–∞–ª, —á—Ç–æ —ç—Ç–æ —Ä–µ–∫–ª–∞–º–Ω–∞—è —Å—Ç–∞—Ç—å—è, —Ö–æ—Ç—è –≤ –Ω–µ–π –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ &amp;ldquo;—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º–∏&amp;rdquo; –∏ —Ç–∞–º –∏ —Å—è–º —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è. –ö–∞–∫ –±—ã —Ç–æ –Ω–∏ –±—ã–ª–æ, –Ω–∞ –•–∞–±—Ä–µ —Å—Ç–∞—Ç—å—è —Ç–∞–∫ –∏ –Ω–µ –≤—ã—à–ª–∞, –Ω–æ –≤–æ—Ç —Ç–µ–ø–µ—Ä—å —Å–ø—É—Å—Ç—è —á–µ—Ç—ã—Ä–µ –≥–æ–¥–∞ (&lt;em&gt;–ª—É—á—à–µ –ø–æ–∑–¥–Ω–æ, —á–µ–º –Ω–∏–∫–æ–≥–¥–∞&lt;/em&gt;) –≤—ã—Ö–æ–¥–∏—Ç –∑–¥–µ—Å—å.&lt;/p&gt;
&lt;p&gt;This article &lt;a href=&#34;https://retifrav.github.io/blog/2022/12/24/qt-on-mcu/&#34;&gt;in english&lt;/a&gt; üá∫üá∏.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qt on MCU</title>
      <link>https://retifrav.github.io/blog/2022/12/24/qt-on-mcu/</link>
      <pubDate>Sat, 24 Dec 2022 17:21:19 +0100</pubDate>
      
      <guid>https://retifrav.github.io/blog/2022/12/24/qt-on-mcu/</guid>
      <description>&lt;p&gt;On the 2018-05-03 the was a blog post published in Qt blog: &lt;a href=&#34;https://blog.qt.io/blog/2018/05/03/qt-microncontrollers-mcu/&#34;&gt;Qt on Microcontrollers&lt;/a&gt;. It was about the first PoC of Qt running on several selected MCUs. I say &amp;ldquo;was&amp;rdquo;, because for unknown reasons that post is no longer available in the Qt blog.&lt;/p&gt;


    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2022/12/24/qt-on-mcu/images/qt-on-mcu.jpg&#34; alt=&#34;Qt on MCU&#34;&gt;

&lt;p&gt;All the work on that PoC was single-handedly done by &lt;a href=&#34;https://linkedin.com/in/msvetkin&#34;&gt;Mikhail Svetkin&lt;/a&gt;, who was an embedded software developer in The Qt Company back at the time, and looks like the post was taken down at some point after he left the company (&lt;em&gt;Internet Archive has the last snapshot on &lt;a href=&#34;http://web.archive.org/web/20190502214913/https://blog.qt.io/blog/2018/05/03/qt-microncontrollers-mcu/&#34;&gt;2019-05-02&lt;/a&gt;&lt;/em&gt;). Perhaps the new project owner didn&amp;rsquo;t like something about that article?&lt;/p&gt;
&lt;p&gt;Anyway, I thought I&amp;rsquo;ll resurrect the post and publish it here for the history. Everything below is published almost as it was in the original post in the Qt blog.&lt;/p&gt;
&lt;p&gt;–≠—Ç–∞ —Å—Ç–∞—Ç—å—è &lt;a href=&#34;https://retifrav.github.io/blog/2022/12/24/qt-on-mcu-ru/&#34;&gt;–Ω–∞ —Ä—É—Å—Å–∫–æ–º&lt;/a&gt; üá∑üá∫.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Managing dependencies in a C&#43;&#43; project with vcpkg</title>
      <link>https://retifrav.github.io/blog/2022/10/30/cpp-dependencies-with-vcpkg/</link>
      <pubDate>Sun, 30 Oct 2022 16:09:08 +0200</pubDate>
      
      <guid>https://retifrav.github.io/blog/2022/10/30/cpp-dependencies-with-vcpkg/</guid>
      <description>&lt;p&gt;More than half a year ago I was &lt;a href=&#34;https://retifrav.github.io/blog/2022/02/06/cpp-dependencies-with-conan/&#34;&gt;trying out Conan&lt;/a&gt; package manager for resolving dependencies in our C++ project. The research went well, but we never actually proceeded with switching to Conan for the whole project. And then a couple of weeks ago I started looking into &lt;a href=&#34;https://vcpkg.io/&#34;&gt;vcpkg&lt;/a&gt;.&lt;/p&gt;


    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2022/10/30/cpp-dependencies-with-vcpkg/images/vcpkg.png&#34; alt=&#34;vcpkg logo&#34;&gt;

&lt;p&gt;I&amp;rsquo;ve heard about vcpkg before and even tried to make a vcpkg package for one library a couple of years ago, but back then I didn&amp;rsquo;t find documentation for this (&lt;em&gt;as I now understand, that&amp;rsquo;s because one does not really create a &amp;ldquo;package&amp;rdquo;&lt;/em&gt;) and abandonned the task. I never thought I&amp;rsquo;ll be looking at vcpkg again, but recently I discovered that some teams have been switching from Conan to vcpkg, which sounded intriguing and promising, as we still needed a package manager for our projects.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Visitors analytics with Microsoft Graph</title>
      <link>https://retifrav.github.io/blog/2022/08/15/visitors-analytics-with-microsoft-graph/</link>
      <pubDate>Mon, 15 Aug 2022 15:50:40 +0200</pubDate>
      
      <guid>https://retifrav.github.io/blog/2022/08/15/visitors-analytics-with-microsoft-graph/</guid>
      <description>&lt;p&gt;Our company uses Office 365 and &lt;a href=&#34;https://azure.microsoft.com/en-us/services/active-directory/&#34;&gt;Azure Active Directory&lt;/a&gt;, which allows us to rely on &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-saml-protocol-reference&#34;&gt;SAML SSO&lt;/a&gt; for authenticating company users on our websites. At some point we got curious about what kind of users visit our websites - not quantities but kind of &amp;ldquo;corporate demographics&amp;rdquo;: what is their team/department name, their role/job title, their manager, country where their office is and so on.&lt;/p&gt;


    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2022/08/15/visitors-analytics-with-microsoft-graph/images/microsoft-graph-charts.png&#34; alt=&#34;Microsoft Graph and charts&#34;&gt;

&lt;p&gt;We don&amp;rsquo;t collect any of this data on our websites (&lt;em&gt;we probably could, at least on those where we control the authentication process, but we don&amp;rsquo;t&lt;/em&gt;). The only piece of information that we do have about our visitors (&lt;em&gt;aside from IP-addresses in web-servers access logs&lt;/em&gt;) is their e-mails and GUIDs, thanks to SAML SSO. That might not seem like much, but knowing just the e-mails (&lt;em&gt;or GUIDs&lt;/em&gt;) is actually quite enough, as one can use &lt;a href=&#34;https://docs.microsoft.com/en-us/graph/overview&#34;&gt;Microsoft Graph&lt;/a&gt; to query more data using those. And for the actual analytics purposes that data can then be visualized/presented using &lt;a href=&#34;https://matplotlib.org&#34;&gt;Matplotlib&lt;/a&gt; charts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LDAP authentication in ASP.NET Core MVC</title>
      <link>https://retifrav.github.io/blog/2022/06/16/dotnet-ldap-authentication/</link>
      <pubDate>Thu, 16 Jun 2022 10:46:05 +0200</pubDate>
      
      <guid>https://retifrav.github.io/blog/2022/06/16/dotnet-ldap-authentication/</guid>
      <description>&lt;p&gt;We needed to make a (&lt;em&gt;yet another&lt;/em&gt;) internal portal/website for employees, but this time, as that would be an internal resource, we decided to utilize users accounts data provided via &lt;a href=&#34;https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol&#34;&gt;LDAP&lt;/a&gt; by our office&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Active_Directory&#34;&gt;Active Directory&lt;/a&gt;, instead of (&lt;em&gt;yet again&lt;/em&gt;) implementing &amp;ldquo;local&amp;rdquo; user identities like we did before with &lt;a href=&#34;https://retifrav.github.io/blog/2018/03/20/csharp-dotnet-core-identity-mysql/&#34;&gt;MySQL&lt;/a&gt; and &lt;a href=&#34;https://retifrav.github.io/blog/2020/10/17/dotnet-core-identity-postgresql/&#34;&gt;PostgreSQL&lt;/a&gt;.&lt;/p&gt;


    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2022/06/16/dotnet-ldap-authentication/images/dotnet-core-ldap.png&#34; alt=&#34;.NET Core LDAP&#34;&gt;

&lt;p&gt;(&lt;em&gt;Of course&lt;/em&gt;) we chose &lt;a href=&#34;https://dotnet.microsoft.com/en-us/apps/aspnet&#34;&gt;ASP.NET Core&lt;/a&gt; MVC for making the portal. And as both ASP.NET and Active Directory have been around for a while, and given the fact that both come from the same vendor, one would expect that implementing Active Directory users authentication via LDAP in such a setup to be a well-known topic with detailed documentation, examples and a lot of tutorials available. But as fucking usual, it&amp;rsquo;s not quite like that.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Querying astronomy databases in ADQL via TAP</title>
      <link>https://retifrav.github.io/blog/2022/02/26/astronomy-databases-tap-adql/</link>
      <pubDate>Sat, 26 Feb 2022 18:34:15 +0100</pubDate>
      
      <guid>https://retifrav.github.io/blog/2022/02/26/astronomy-databases-tap-adql/</guid>
      <description>&lt;p&gt;There are several astronomy databases that store various information about space objects such as stars and planets. Some (&lt;em&gt;most?&lt;/em&gt;) of those databases expose their data via &lt;a href=&#34;https://www.ivoa.net/documents/TAP/&#34;&gt;TAP&lt;/a&gt; interface, so it can be queried using &lt;a href=&#34;https://www.ivoa.net/documents/ADQL/&#34;&gt;ADQL&lt;/a&gt;.&lt;/p&gt;


    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2022/02/26/astronomy-databases-tap-adql/images/tap-adql-sandbox.png&#34; alt=&#34;TAP ADQL sandbox&#34;&gt;

&lt;p&gt;Here I&amp;rsquo;ll be telling about how to get data from such sources and what sort of issues/problems one can encounter.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Conan and resolving dependencies in a C&#43;&#43; project</title>
      <link>https://retifrav.github.io/blog/2022/02/06/cpp-dependencies-with-conan/</link>
      <pubDate>Sun, 06 Feb 2022 14:47:47 +0100</pubDate>
      
      <guid>https://retifrav.github.io/blog/2022/02/06/cpp-dependencies-with-conan/</guid>
      <description>&lt;p&gt;Like many other teams, we have a fair amount of 3rd-party dependencies in our project (&lt;em&gt;a C++-based SDK, that is&lt;/em&gt;). Like fewer other teams, we store those dependencies source code right in our project repository and we build them together with the project sources every time. This is of course a tremendous waste of time and CPU cycles, as it would be much more efficient to build dependencies just once (&lt;em&gt;per version&lt;/em&gt;) and link to already pre-built binaries.&lt;/p&gt;



&lt;figure class=&#34;with-original&#34;&gt;
    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2022/02/06/cpp-dependencies-with-conan/images/conan-the-librarian.png&#34; alt=&#34;Conan The Librarian&#34;&gt;
    &lt;footer&gt;
        &lt;small&gt;
            &lt;i&gt;&lt;a href=&#34;https://igorcomics.blogspot.com/2017/11/conan-librarian.html&#34;&gt;original picture&lt;/a&gt;&lt;/i&gt;
        &lt;/small&gt;
    &lt;/footer&gt;
&lt;/figure&gt;

&lt;p&gt;But where to store pre-built dependencies and how to fetch the correct variants for various platforms, toolchains and configurations? Our investigation on the matter led us to &lt;a href=&#34;https://conan.io/&#34;&gt;Conan&lt;/a&gt; package manager.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>KeePass as internal secrets storage for a team</title>
      <link>https://retifrav.github.io/blog/2022/01/13/keepass-as-internal-secrets-storage/</link>
      <pubDate>Thu, 13 Jan 2022 21:53:34 +0100</pubDate>
      
      <guid>https://retifrav.github.io/blog/2022/01/13/keepass-as-internal-secrets-storage/</guid>
      <description>&lt;p&gt;For a long time in our team we&amp;rsquo;ve been storing logins, passwords, keys and other things like that in personal password managers or just plain-text files, spread around people&amp;rsquo;s machines, and no one had the full set. Finally, we decided to stop this chaos and start using one common passwords database.&lt;/p&gt;


    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2022/01/13/keepass-as-internal-secrets-storage/images/keepassxc-passwords.png&#34; alt=&#34;Passwords in KeePass XC&#34;&gt;

&lt;p&gt;Having evaluated several options, we chose &lt;a href=&#34;https://en.wikipedia.org/wiki/KeePass&#34;&gt;KeePass&lt;/a&gt;. It&amp;rsquo;s not exactly meant for multi-user usage, but we came up with some sort of workaround.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Electric car in Norway, leasing BMW i3</title>
      <link>https://retifrav.github.io/blog/2021/12/16/electric-car-norway-leasing-bmw-i3/</link>
      <pubDate>Thu, 16 Dec 2021 23:15:19 +0100</pubDate>
      
      <guid>https://retifrav.github.io/blog/2021/12/16/electric-car-norway-leasing-bmw-i3/</guid>
      <description>&lt;p&gt;A couple of years ago we came to a point when having a car had become more of a necessity than a luxury. Having spent about a year to get norwegian driving license, we entered a leasing contract for a new BMW i3.&lt;/p&gt;


    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2021/12/16/electric-car-norway-leasing-bmw-i3/images/bmw-i3.jpg&#34; alt=&#34;BMW i3&#34;&gt;

&lt;p&gt;Here I&amp;rsquo;ll be talking about the leasing process and in general about the experience of owning an electric car in Norway.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Making a deb package with CMake/CPack and hosting it in a private APT repository</title>
      <link>https://retifrav.github.io/blog/2021/09/23/cmake-cpack-package-deb-apt/</link>
      <pubDate>Thu, 23 Sep 2021 11:26:15 +0200</pubDate>
      
      <guid>https://retifrav.github.io/blog/2021/09/23/cmake-cpack-package-deb-apt/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://retifrav.github.io/blog/2021/03/08/cmake-cpp-library/&#34;&gt;Last time&lt;/a&gt; I needed to handle a C++ library project with CMake. This time I was tasked with creating a deb package for one of the libraries in our SDK.&lt;/p&gt;


    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2021/09/23/cmake-cpack-package-deb-apt/images/cmake-cpack-deb.png&#34; alt=&#34;CMake, CPack, deb package&#34;&gt;

&lt;p&gt;And what would you know, CMake can handle packaging too - with &lt;a href=&#34;https://cmake.org/cmake/help/latest/module/CPack.html&#34;&gt;CPack&lt;/a&gt; utility.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
