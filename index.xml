<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:media="http://search.yahoo.com/mrss/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:georss="http://www.georss.org/georss">
  <channel>
    <title>Declaration of VAR</title>
    <link>https://retifrav.github.io/</link>
    <description>Recent content of Declaration of VAR</description>
    <language>en-us</language>
    <copyright>retif</copyright>
    
    <lastBuildDate>Sat, 22 Jul 2023 14:32:36 +0200</lastBuildDate>
    
    
        <atom:link href="https://retifrav.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CMake target_link_libraries() scopes</title>
      <link>https://retifrav.github.io/blog/2023/07/22/cmake-target-link-libraries-scopes/</link>
      <pubDate>Sat, 22 Jul 2023 14:32:36 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2023/07/22/cmake-target-link-libraries-scopes/</guid>
      <description><![CDATA[New post: CMake target_link_libraries() scopes]]></description>
      <content:encoded><![CDATA[<p>The CMake&rsquo;s <a href="https://cmake.org/cmake/help/latest/command/target_link_libraries.html">target_link_libraries()</a> function has different <a href="https://cmake.org/cmake/help/latest/manual/cmake-buildsystem.7.html#target-usage-requirements">scopes</a> (<em><code>PRIVATE</code>/<code>INTERFACE</code>/<code>PUBLIC</code></em>), and I never understood what exactly each one of them means and how do they actually affect the final result.</p>


    <img class="image-post" loading="lazy" src="/blog/2023/07/22/cmake-target-link-libraries-scopes/images/cmake-linking.png" alt="CMake, linking 3rd-party dependency, your SDK and application">

<p>As there is a limit for how long one can postpone one&rsquo;s ignorance, it finally came a time for me to investigate the matter, which I did by (<em>reading the documentation and</em>) conducting a small experiment of my own.</p>]]></content:encoded>
    </item>
    
    <item>
      <title>Building stuff from sources on Steam Deck</title>
      <link>https://retifrav.github.io/blog/2023/05/28/steam-deck-building-stuff-from-sources/</link>
      <pubDate>Sun, 28 May 2023 20:46:09 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2023/05/28/steam-deck-building-stuff-from-sources/</guid>
      <description><![CDATA[New post: Building stuff from sources on Steam Deck]]></description>
      <content:encoded><![CDATA[<p>My <a href="/blog/2023/04/10/steam-deck/">previous article</a> about Steam Deck has exploded in size, so I decided to move the part about installing packages and building stuff into a separate article.</p>


    <img class="image-post" loading="lazy" src="/blog/2023/05/28/steam-deck-building-stuff-from-sources/images/steam-deck-dock-mouse-keyboard.jpg" alt="Steam Deck, Konsole in Desktop mode and docked with mouse and keyboard">

<p>But it&rsquo;s not just already published parts, there are some new things too: in particular, I&rsquo;ve managed to build Qt (<em>both shared and static configurations</em>) and used it to build my own applications.</p>]]></content:encoded>
    </item>
    
    <item>
      <title>Steam Deck</title>
      <link>https://retifrav.github.io/blog/2023/04/10/steam-deck/</link>
      <pubDate>Mon, 10 Apr 2023 14:24:31 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2023/04/10/steam-deck/</guid>
      <description><![CDATA[New post: Steam Deck]]></description>
      <content:encoded><![CDATA[<p>If you play games (<em>actual games, not <a href="https://files.decovar.dev/public/blog/steam-deck/drake-no-games.mp4">press-X-to-win blurry movies</a></em>), then undoubtly you have heard about <a href="https://steamdeck.com/">Steam Deck</a>. If you haven&rsquo;t, then you can probably just go watch some more of your favorite titles on PS/Xbox/Switch/whatsthename instead of reading this wall of text.</p>


    <img class="image-post" loading="lazy" src="/blog/2023/04/10/steam-deck/images/steam-deck-space-rangers-screenshot.jpg" alt="Steam Deck, –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–π–Ω–¥–∂–µ—Ä—ã">

<p>Yes, I&rsquo;ve got my very own Steam Deck too. And as many have already said, it does exceed all the expectations (<em>and then some</em>).</p>]]></content:encoded>
    </item>
    
    <item>
      <title>–ù–æ—Ä–≤–µ–∂—Å–∫–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ</title>
      <link>https://retifrav.github.io/blog/2023/01/15/norway-citizenship/</link>
      <pubDate>Sun, 15 Jan 2023 18:22:10 +0100</pubDate>
      <guid>https://retifrav.github.io/blog/2023/01/15/norway-citizenship/</guid>
      <description><![CDATA[New post: –ù–æ—Ä–≤–µ–∂—Å–∫–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ]]></description>
      <content:encoded><![CDATA[<p>–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ –ø–æ–ª—É—á–∏–ª –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –ù–æ—Ä–≤–µ–≥–∏–∏ (<em>–ö–æ—Ä–æ–ª–µ–≤—Å—Ç–≤–∞ –ù–æ—Ä–≤–µ–≥–∏—è!</em>).</p>


    <img class="image-post" loading="lazy" src="/blog/2023/01/15/norway-citizenship/images/norwegian-and-russian-passports.jpg" alt="–ù–æ—Ä–≤–µ–∂—Å–∫–∏–π –∏ —Ä—É—Å—Å–∫–∏–π –ø–∞—Å–ø–æ—Ä—Ç–∞">

<p>–®—ë–ª —è –∫ —ç—Ç–æ–º—É –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–ª–≥–æ, –∏ –±—ã–ª–æ —ç—Ç–æ –Ω–µ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ. –ù–æ —Å–∞–º–æ–π —Å–ª–æ–∂–Ω–æ–π —á–∞—Å—Ç—å—é –±—ã–ª–æ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –≤ –ù–æ—Ä–≤–µ–≥–∏–∏, —á—Ç–æ–±—ã –≤—ã–µ—Ö–∞—Ç—å –∏–∑ –†–æ—Å—Å–∏–∏; –∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–µ–∑–¥–∞ –≤ –ù–æ—Ä–≤–µ–≥–∏—é –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–æ–º –ø—Ä–æ—Ç–µ–∫–∞–ª, –º–æ–∂–Ω–æ —Å–∫–∞–∑–∞—Ç—å, –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ—Ç –º–µ–Ω—è —Å–∞–º–æ–≥–æ —Ç—Ä–µ–±–æ–≤–∞–ª–æ—Å—å –¥–æ–≤–æ–ª—å–Ω–æ –Ω–µ–º–Ω–æ–≥–æ, –∏ –º–∞–ª–æ —á—Ç–æ (<em>–µ—Å–ª–∏ –≤–æ–æ–±—â–µ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ</em>) –º–æ–≥–ª–æ –ø–æ–π—Ç–∏ –Ω–µ —Ç–∞–∫.</p>]]></content:encoded>
    </item>
    
    <item>
      <title>Qt –Ω–∞ –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö</title>
      <link>https://retifrav.github.io/blog/2022/12/24/qt-on-mcu-ru/</link>
      <pubDate>Sat, 24 Dec 2022 17:21:20 +0100</pubDate>
      <guid>https://retifrav.github.io/blog/2022/12/24/qt-on-mcu-ru/</guid>
      <description><![CDATA[New post: Qt –Ω–∞ –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞—Ö]]></description>
      <content:encoded><![CDATA[<p>–≠—Ç–∞ —Å—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–≤–∞–ª–∞—Å—å –∫–∞–∫ –ø–µ—Ä–µ–≤–æ–¥ <a href="https://blog.qt.io/blog/2018/05/03/qt-microncontrollers-mcu/">–ø–æ—Å—Ç–∞</a> (<em>–∫–æ—Ç–æ—Ä—ã–π –ø–æ—á–µ–º—É-—Ç–æ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω</em>) –∏–∑ –±–ª–æ–≥–∞ The Qt Company –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ <a href="https://habr.com/">–•–∞–±—Ä–µ</a>. –ù–æ –ù–õ–û —Å–∫–∞–∑–∞–ª–æ, —á—Ç–æ —Å—Ç–∞—Ç—å—è —Ä–µ–∫–ª–∞–º–Ω–∞—è, –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–µ –¥–∞–ª–æ.</p>
<img class="image-post" src="/blog/2022/12/24/qt-on-mcu/images/qt-on-mcu.jpg" alt="Qt on MCU">
<p>–Ø –±—ã –Ω–µ —Å–∫–∞–∑–∞–ª, —á—Ç–æ —ç—Ç–æ —Ä–µ–∫–ª–∞–º–Ω–∞—è —Å—Ç–∞—Ç—å—è, —Ö–æ—Ç—è –≤ –Ω–µ–π –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ &ldquo;—Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞–º–∏&rdquo; –∏ —Ç–∞–º –∏ —Å—è–º —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è –ª–∏—Ü–µ–Ω–∑–∏—è. –ö–∞–∫ –±—ã —Ç–æ –Ω–∏ –±—ã–ª–æ, –Ω–∞ –•–∞–±—Ä–µ —Å—Ç–∞—Ç—å—è —Ç–∞–∫ –∏ –Ω–µ –≤—ã—à–ª–∞, –Ω–æ –≤–æ—Ç —Ç–µ–ø–µ—Ä—å —Å–ø—É—Å—Ç—è —á–µ—Ç—ã—Ä–µ –≥–æ–¥–∞ (<em>–ª—É—á—à–µ –ø–æ–∑–¥–Ω–æ, —á–µ–º –Ω–∏–∫–æ–≥–¥–∞</em>) –≤—ã—Ö–æ–¥–∏—Ç –∑–¥–µ—Å—å.</p>
<p>This article <a href="/blog/2022/12/24/qt-on-mcu/">in english</a> üá∫üá∏.</p>]]></content:encoded>
    </item>
    
    <item>
      <title>Qt on MCU</title>
      <link>https://retifrav.github.io/blog/2022/12/24/qt-on-mcu/</link>
      <pubDate>Sat, 24 Dec 2022 17:21:19 +0100</pubDate>
      <guid>https://retifrav.github.io/blog/2022/12/24/qt-on-mcu/</guid>
      <description><![CDATA[New post: Qt on MCU]]></description>
      <content:encoded><![CDATA[<p>On the 2018-05-03 there was a post published in The Qt Company blog: &ldquo;<a href="https://blog.qt.io/blog/2018/05/03/qt-microncontrollers-mcu/">Qt on Microcontrollers</a>&rdquo;. It was about the first PoC of Qt running on several selected MCUs. I say &ldquo;was&rdquo;, because for unknown reasons that post is no longer available in the Qt blog.</p>


    <img class="image-post" loading="lazy" src="/blog/2022/12/24/qt-on-mcu/images/qt-on-mcu.jpg" alt="Qt on MCU">

<p>All the work on that PoC was single-handedly done by <a href="https://linkedin.com/in/msvetkin">Mikhail Svetkin</a>, who was an embedded software developer in The Qt Company back at the time, and looks like the post was taken down at some point after he left the company (<em>Internet Archive has the last snapshot on <a href="http://web.archive.org/web/20190502214913/https://blog.qt.io/blog/2018/05/03/qt-microncontrollers-mcu/">2019-05-02</a></em>). Perhaps the new project owner didn&rsquo;t like something about that article?</p>
<p>Anyway, I thought I&rsquo;ll resurrect the post and publish it here for the history. Everything below is published almost as it was in the original post in the Qt blog.</p>
<p>–≠—Ç–∞ —Å—Ç–∞—Ç—å—è <a href="/blog/2022/12/24/qt-on-mcu-ru/">–Ω–∞ —Ä—É—Å—Å–∫–æ–º</a> üá∑üá∫.</p>]]></content:encoded>
    </item>
    
    <item>
      <title>Managing dependencies in a C&#43;&#43; project with vcpkg</title>
      <link>https://retifrav.github.io/blog/2022/10/30/cpp-dependencies-with-vcpkg/</link>
      <pubDate>Sun, 30 Oct 2022 16:09:08 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2022/10/30/cpp-dependencies-with-vcpkg/</guid>
      <description><![CDATA[New post: Managing dependencies in a C&#43;&#43; project with vcpkg]]></description>
      <content:encoded><![CDATA[<p>More than half a year ago I was <a href="/blog/2022/02/06/cpp-dependencies-with-conan/">trying out Conan</a> package manager for resolving dependencies in our C++ project. The research went well, but we never actually proceeded with switching to Conan for the whole project. And then a couple of weeks ago I started looking into <a href="https://vcpkg.io/">vcpkg</a>.</p>


    <img class="image-post" loading="lazy" src="/blog/2022/10/30/cpp-dependencies-with-vcpkg/images/vcpkg.png" alt="vcpkg logo">

<p>I&rsquo;ve heard about vcpkg before and even tried to make a vcpkg package for one library a couple of years ago, but back then I didn&rsquo;t find documentation for this (<em>as I now understand, that&rsquo;s because one does not really create a &ldquo;package&rdquo;</em>) and abandonned the task. I never thought I&rsquo;ll be looking at vcpkg again, but recently I discovered that some teams have been switching from Conan to vcpkg, which sounded intriguing and promising, as we still needed a package manager for our projects.</p>]]></content:encoded>
    </item>
    
    <item>
      <title>Visitors analytics with Microsoft Graph</title>
      <link>https://retifrav.github.io/blog/2022/08/15/visitors-analytics-with-microsoft-graph/</link>
      <pubDate>Mon, 15 Aug 2022 15:50:40 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2022/08/15/visitors-analytics-with-microsoft-graph/</guid>
      <description><![CDATA[New post: Visitors analytics with Microsoft Graph]]></description>
      <content:encoded><![CDATA[<p>Our company uses Office 365 and <a href="https://azure.microsoft.com/en-us/services/active-directory/">Azure Active Directory</a>, which allows us to rely on <a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-saml-protocol-reference">SAML SSO</a> for authenticating company users on our websites. At some point we got curious about what kind of users visit our websites - not quantities but kind of &ldquo;corporate demographics&rdquo;: what is their team/department name, their role/job title, their manager, country where their office is and so on.</p>


    <img class="image-post" loading="lazy" src="/blog/2022/08/15/visitors-analytics-with-microsoft-graph/images/microsoft-graph-charts.png" alt="Microsoft Graph and charts">

<p>We don&rsquo;t collect any of this data on our websites (<em>we probably could, at least on those where we control the authentication process, but we don&rsquo;t</em>). The only piece of information that we do have about our visitors (<em>aside from IP-addresses in web-servers access logs</em>) is their e-mails and GUIDs, thanks to SAML SSO. That might not seem like much, but knowing just the e-mails (<em>or GUIDs</em>) is actually quite enough, as one can use <a href="https://docs.microsoft.com/en-us/graph/overview">Microsoft Graph</a> to query more data using those. And for the actual analytics purposes that data can then be visualized/presented using <a href="https://matplotlib.org">Matplotlib</a> charts.</p>]]></content:encoded>
    </item>
    
    <item>
      <title>LDAP authentication in ASP.NET Core MVC</title>
      <link>https://retifrav.github.io/blog/2022/06/16/dotnet-ldap-authentication/</link>
      <pubDate>Thu, 16 Jun 2022 10:46:05 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2022/06/16/dotnet-ldap-authentication/</guid>
      <description><![CDATA[New post: LDAP authentication in ASP.NET Core MVC]]></description>
      <content:encoded><![CDATA[<p>We needed to make a (<em>yet another</em>) internal portal/website for employees, but this time, as that would be an internal resource, we decided to utilize users accounts data provided via <a href="https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol">LDAP</a> by our office&rsquo;s <a href="https://en.wikipedia.org/wiki/Active_Directory">Active Directory</a>, instead of (<em>yet again</em>) implementing &ldquo;local&rdquo; user identities like we did before with <a href="/blog/2018/03/20/csharp-dotnet-core-identity-mysql/">MySQL</a> and <a href="/blog/2020/10/17/dotnet-core-identity-postgresql/">PostgreSQL</a>.</p>


    <img class="image-post" loading="lazy" src="/blog/2022/06/16/dotnet-ldap-authentication/images/dotnet-core-ldap.png" alt=".NET Core LDAP">

<p>(<em>Of course</em>) we chose <a href="https://dotnet.microsoft.com/en-us/apps/aspnet">ASP.NET Core</a> MVC for making the portal. And as both ASP.NET and Active Directory have been around for a while, and given the fact that both come from the same vendor, one would expect that implementing Active Directory users authentication via LDAP in such a setup to be a well-known topic with detailed documentation, examples and a lot of tutorials available. But as fucking usual, it&rsquo;s not quite like that.</p>]]></content:encoded>
    </item>
    
    <item>
      <title>Querying astronomy databases in ADQL via TAP</title>
      <link>https://retifrav.github.io/blog/2022/02/26/astronomy-databases-tap-adql/</link>
      <pubDate>Sat, 26 Feb 2022 18:34:15 +0100</pubDate>
      <guid>https://retifrav.github.io/blog/2022/02/26/astronomy-databases-tap-adql/</guid>
      <description><![CDATA[New post: Querying astronomy databases in ADQL via TAP]]></description>
      <content:encoded><![CDATA[<p>There are several astronomy databases that store various information about space objects such as stars and planets. Some (<em>most?</em>) of those databases expose their data via <a href="https://www.ivoa.net/documents/TAP/">TAP</a> interface, so it can be queried using <a href="https://www.ivoa.net/documents/ADQL/">ADQL</a>.</p>


    <img class="image-post" loading="lazy" src="/blog/2022/02/26/astronomy-databases-tap-adql/images/tap-adql-sandbox.png" alt="TAP ADQL sandbox">

<p>Here I&rsquo;ll be telling about how to get data from such sources and what sort of issues/problems one can encounter.</p>]]></content:encoded>
    </item>
    
    <item>
      <title>Conan and resolving dependencies in a C&#43;&#43; project</title>
      <link>https://retifrav.github.io/blog/2022/02/06/cpp-dependencies-with-conan/</link>
      <pubDate>Sun, 06 Feb 2022 14:47:47 +0100</pubDate>
      <guid>https://retifrav.github.io/blog/2022/02/06/cpp-dependencies-with-conan/</guid>
      <description><![CDATA[New post: Conan and resolving dependencies in a C&#43;&#43; project]]></description>
      <content:encoded><![CDATA[<p>Like many other teams, we have a fair amount of 3rd-party dependencies in our project (<em>a C++-based SDK, that is</em>). Like fewer other teams, we store those dependencies source code right in our project repository and we build them together with the project sources every time. This is of course a tremendous waste of time and CPU cycles, as it would be much more efficient to build dependencies just once (<em>per version</em>) and link to already pre-built binaries.</p>



<figure class="with-original">
    <img class="image-post" loading="lazy" src="/blog/2022/02/06/cpp-dependencies-with-conan/images/conan-the-librarian.png" alt="Conan The Librarian">
    <footer>
        <small>
            <i><a href="https://igorcomics.blogspot.com/2017/11/conan-librarian.html">original picture</a></i>
        </small>
    </footer>
</figure>

<p>But where to store pre-built dependencies and how to fetch the correct variants for various platforms, toolchains and configurations? Our investigation on the matter led us to <a href="https://conan.io/">Conan</a> package manager.</p>]]></content:encoded>
    </item>
    
  </channel>
</rss>
