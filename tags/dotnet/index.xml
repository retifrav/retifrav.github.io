<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dotnet on Declaration of VAR</title>
    <link>https://retifrav.github.io/tags/dotnet/</link>
    <description>Recent content in Dotnet on Declaration of VAR</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>retif</copyright>
    <lastBuildDate>Thu, 16 Jun 2022 10:46:05 +0200</lastBuildDate>
    <atom:link href="https://retifrav.github.io/tags/dotnet/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LDAP authentication in ASP.NET Core MVC</title>
      <link>https://retifrav.github.io/blog/2022/06/16/dotnet-ldap-authentication/</link>
      <pubDate>Thu, 16 Jun 2022 10:46:05 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2022/06/16/dotnet-ldap-authentication/</guid>
      <description>&lt;p&gt;We needed to make a (&lt;em&gt;yet another&lt;/em&gt;) internal portal/website for employees, but this time, as that would be an internal resource, we decided to utilize users accounts data provided via &lt;a href=&#34;https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol&#34;&gt;LDAP&lt;/a&gt; by our office&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Active_Directory&#34;&gt;Active Directory&lt;/a&gt;, instead of (&lt;em&gt;yet again&lt;/em&gt;) implementing &amp;ldquo;local&amp;rdquo; user identities like we did before with &lt;a href=&#34;https://retifrav.github.io/blog/2018/03/20/csharp-dotnet-core-identity-mysql/&#34;&gt;MySQL&lt;/a&gt; and &lt;a href=&#34;https://retifrav.github.io/blog/2020/10/17/dotnet-core-identity-postgresql/&#34;&gt;PostgreSQL&lt;/a&gt;.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2022/06/16/dotnet-ldap-authentication/images/dotnet-core-ldap.png&#34; alt=&#34;.NET Core LDAP&#34;&gt;&#xD;&#xA;&#xA;&lt;p&gt;(&lt;em&gt;Of course&lt;/em&gt;) we chose &lt;a href=&#34;https://dotnet.microsoft.com/en-us/apps/aspnet&#34;&gt;ASP.NET Core&lt;/a&gt; MVC for making the portal. And as both ASP.NET and Active Directory have been around for a while, and given the fact that both come from the same vendor, one would expect that implementing Active Directory users authentication via LDAP in such a setup to be a well-known topic with detailed documentation, examples and a lot of tutorials available. But as fucking usual, it&amp;rsquo;s not quite like that.&lt;/p&gt;</description>
    </item>
    <item>
      <title>.NET Core Identity with PostgreSQL</title>
      <link>https://retifrav.github.io/blog/2020/10/17/dotnet-core-identity-postgresql/</link>
      <pubDate>Sat, 17 Oct 2020 13:32:15 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2020/10/17/dotnet-core-identity-postgresql/</guid>
      <description>&lt;p&gt;A couple of years ago I wrote &lt;a href=&#34;https://retifrav.github.io/blog/2018/03/20/csharp-dotnet-core-identity-mysql/&#34;&gt;a post&lt;/a&gt; about setting up Identity in .NET Core MVC application with MySQL. Now I am starting a new project, and this time I want to try using PostgreSQL.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2020/10/17/dotnet-core-identity-postgresql/images/dotnet-core-identity-postgresql.png&#34; alt=&#34;.NET Core Identity PostgreSQL&#34;&gt;&#xD;&#xA;&#xA;&lt;p&gt;It is also a good timing to prepare for the upcoming &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/introducing-net-5/&#34;&gt;.NET 5&lt;/a&gt;, which is about to release next month, so I decided to do it with &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/announcing-net-5-0-rc-2/&#34;&gt;.NET 5.0 RC2&lt;/a&gt; right away.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The fuck is this CORS and how do I send my bloody request</title>
      <link>https://retifrav.github.io/blog/2019/10/10/the-fuck-is-this-cors/</link>
      <pubDate>Thu, 10 Oct 2019 18:42:34 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2019/10/10/the-fuck-is-this-cors/</guid>
      <description>&lt;p&gt;So I was working on some web view and I needed to send an &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&#34;&gt;XMLHttpRequest&lt;/a&gt; using JS. Usually I was working with my own backend, but this time it was a different remote host (&lt;em&gt;our &lt;a href=&#34;https://www.jetbrains.com/youtrack/&#34;&gt;YouTrack&lt;/a&gt; instance&lt;/em&gt;), and my request failed with the following error:&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2019/10/10/the-fuck-is-this-cors/images/firefox-cors-missing-header.png&#34; alt=&#34;Firefox, missing CORS header&#34;&gt;&#xD;&#xA;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scala&#34; data-lang=&#34;scala&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Cross&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Origin&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Blocked&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;The&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Same&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Origin&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Policy&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;disallows&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;reading&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;remote&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;at&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;http://some.host?params&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ololo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Reason&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CORS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;header&lt;/span&gt; &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;‘&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;’&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;missing&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Cross&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Origin&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Request&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Blocked&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;The&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Same&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Origin&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Policy&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;disallows&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;reading&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;the&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;remote&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;resource&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;at&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;http://some.host?params&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;ololo&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;Reason&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;CORS&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;request&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;did&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;succeed&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;).&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#xA;&lt;p&gt;That&amp;rsquo;s how I learnt about the existence of CORS, as it turned out I never sent cross-origin requests before.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Microsoft Azure AD authentication on your website</title>
      <link>https://retifrav.github.io/blog/2019/09/21/microsoft-authentication/</link>
      <pubDate>Sat, 21 Sep 2019 19:11:24 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2019/09/21/microsoft-authentication/</guid>
      <description>&lt;p&gt;You might have wondered how to add the Microsoft sign-in to certain corporate websites inside your company (&lt;em&gt;which are available from the internet&lt;/em&gt;) in order to restrict access to employees of your organization only.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2019/09/21/microsoft-authentication/images/microsoft-sign-in.png&#34; alt=&#34;Microsoft sign in&#34;&gt;&#xD;&#xA;&#xA;&lt;p&gt;At least I have, and it turned out to be not so difficult actually.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Players queue for Heroes of Might and Magic</title>
      <link>https://retifrav.github.io/blog/2019/09/21/homm-queue/</link>
      <pubDate>Sat, 21 Sep 2019 14:58:46 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2019/09/21/homm-queue/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s not like we at work don&amp;rsquo;t have things to do, but suddenly we decided to play &lt;a href=&#34;https://www.gog.com/game/heroes_of_might_and_magic_3_complete_edition&#34;&gt;Heroes of Might and Magic&lt;/a&gt;. So we created a virtual machine, installed the game and started a hot-seat game via RDP.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2019/09/21/homm-queue/images/homm-queue.png&#34; alt=&#34;HoMM queue&#34;&gt;&#xD;&#xA;&#xA;&lt;p&gt;For notifying about next players turn we created a Slack channel. But soon enough it became annoying to announce next turns manually, so I created a simple web-application for that.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chunked upload to Twitter with C# / .NET Core</title>
      <link>https://retifrav.github.io/blog/2019/08/22/twitter-chunked-upload-video/</link>
      <pubDate>Thu, 22 Aug 2019 16:19:40 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2019/08/22/twitter-chunked-upload-video/</guid>
      <description>&lt;p&gt;While images can be &lt;a href=&#34;https://retifrav.github.io/blog/2017/11/24/csharp-dotnet-core-publish-twitter/&#34;&gt;uploaded to Twitter&lt;/a&gt; in one request, uploading a video is a different story.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2019/08/22/twitter-chunked-upload-video/images/dotnet-core-twitter-logo.png&#34; alt=&#34;.NET Core, Twitter&#34;&gt;&#xD;&#xA;&#xA;&lt;p&gt;And although I&amp;rsquo;ve managed to implement it, I am not entirely happy with the result, and later you will see why is that.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rectangle previews after recent Twitter redesign</title>
      <link>https://retifrav.github.io/blog/2019/07/22/twitter-redesign-rectangle-previews/</link>
      <pubDate>Mon, 22 Jul 2019 11:16:14 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2019/07/22/twitter-redesign-rectangle-previews/</guid>
      <description>&lt;p&gt;Twitter &lt;a href=&#34;https://blog.twitter.com/en_us/topics/product/2019/introducing-a-new-Twitter-dot-com.html&#34;&gt;got a new design&lt;/a&gt;, and that broke our pictures - these geniuses made &lt;strong&gt;rectangle&lt;/strong&gt; previews for everything, even for &lt;strong&gt;square&lt;/strong&gt; pictures.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;video autoplay=&#34;yes&#34;  loop=&#34;yes&#34;  class=&#34;video&#34;&gt;&#xD;&#xA;        &lt;source src=&#34;https://retifrav.github.io/blog/2019/07/22/twitter-redesign-rectangle-previews/video/twitter-working-new-design.mp4&#34; type=&#34;video/mp4&#34;&gt;&#xD;&#xA;    &lt;/video&gt;&#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;&#xA;&lt;p&gt;Fortunately there is a kinda workaround - to post GIFs instead of images, because GIFs don&amp;rsquo;t get rectangle previews. Retarded problems - retarded solutions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Server-side analytics in .NET Core</title>
      <link>https://retifrav.github.io/blog/2018/07/29/dotnet-core-server-side-analytics/</link>
      <pubDate>Sun, 29 Jul 2018 18:28:00 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2018/07/29/dotnet-core-server-side-analytics/</guid>
      <description>&lt;p&gt;Google Analytics is a good tool for analyzing your website audience, but it uses client-side code (JS), which is not always reliable, because you don&amp;rsquo;t control what&amp;rsquo;s happening there, and users can simply disable GA scripts (web-browsers even start to block such tracking out-of-the-box).&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2018/07/29/dotnet-core-server-side-analytics/images/dotnet-core-analytics.png&#34; alt=&#34;.NET Core analytics&#34;&gt;&#xD;&#xA;&#xA;&lt;p&gt;More reliable way to analyze your visitors would be a server-side analytics.&lt;/p&gt;</description>
    </item>
    <item>
      <title>XMLHttpRequest from QML</title>
      <link>https://retifrav.github.io/blog/2018/06/09/qml-xmlhttprequest/</link>
      <pubDate>Sat, 09 Jun 2018 14:44:02 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2018/06/09/qml-xmlhttprequest/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/XMLHttpRequest&#34;&gt;XMLHttpRequest&lt;/a&gt; is a web standard (WHATWG/W3C, but better to read about it at &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&#34;&gt;MDN&lt;/a&gt;) for communication between JS-frontend and REST-backend.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2018/06/09/qml-xmlhttprequest/images/xmlhttprequest-from-qml.png&#34; alt=&#34;XMLHttpRequest from QML&#34;&gt;&#xD;&#xA;&#xA;&lt;p&gt;And you can use it in &lt;a href=&#34;http://doc.qt.io/qt-5/qtqml-javascript-qmlglobalobject.html#xmlhttprequest&#34;&gt;QML&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C# / .NET Core, publish to Telegram channel</title>
      <link>https://retifrav.github.io/blog/2018/03/31/csharp-dotnet-core-publish-telegram/</link>
      <pubDate>Sat, 31 Mar 2018 14:20:57 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2018/03/31/csharp-dotnet-core-publish-telegram/</guid>
      <description>&lt;p&gt;I can&amp;rsquo;t believe I haven&amp;rsquo;t wrote about publishing to Telegram yet. I have articles about &lt;a href=&#34;https://retifrav.github.io/blog/2017/11/24/csharp-dotnet-core-publish-twitter/&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://retifrav.github.io/blog/2017/11/25/csharp-dotnet-core-publish-facebook/&#34;&gt;Facebook&lt;/a&gt; and &lt;a href=&#34;https://retifrav.github.io/blog/2018/03/28/csharp-dotnet-core-publish-vk/&#34;&gt;VK&lt;/a&gt;, but I should have started with Telegram as it is the easiest among them all.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2018/03/31/csharp-dotnet-core-publish-telegram/images/dotnet-core-telegram-logo.png&#34; alt=&#34;.NET Core Telegram logo&#34;&gt;</description>
    </item>
  </channel>
</rss>
