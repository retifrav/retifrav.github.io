<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on Declaration of VAR</title>
    <link>https://retifrav.github.io/tags/web/</link>
    <description>Recent content in web on Declaration of VAR</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>retif</copyright>
    <lastBuildDate>Mon, 20 Nov 2023 14:40:47 +0100</lastBuildDate><atom:link href="https://retifrav.github.io/tags/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Compiling C&#43;&#43; into WebAssembly with pthreads</title>
      <link>https://retifrav.github.io/blog/2023/11/20/webassembly-with-pthreads/</link>
      <pubDate>Mon, 20 Nov 2023 14:40:47 +0100</pubDate>
      
      <guid>https://retifrav.github.io/blog/2023/11/20/webassembly-with-pthreads/</guid>
      <description>&lt;p&gt;If a C++ program utilizes multithreading via &lt;a href=&#34;https://en.wikipedia.org/wiki/Pthreads&#34;&gt;pthreads&lt;/a&gt;, then compiling it with &lt;a href=&#34;https://emscripten.org/docs/porting/pthreads.html&#34;&gt;Emscripten&lt;/a&gt; into &lt;a href=&#34;https://webassembly.org&#34;&gt;WebAssembly&lt;/a&gt; requires setting certain flags for both compiler and linker. In addition to that, web-server that will be hosting the resulting web-application also requires some configuration.&lt;/p&gt;




&lt;figure class=&#34;with-original&#34;&gt;
    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2023/11/20/webassembly-with-pthreads/images/webassembly-with-pthreads.png&#34; alt=&#34;Meepo clones dancing on top of the WebAssembly logo with pthreads&#34;&gt;
    &lt;footer&gt;
        &lt;small&gt;
            &lt;i&gt;&lt;a href=&#34;https://deviantart.com/kyurikitg/art/Meepo-the-Geomancer-401539735&#34;&gt;original Meepo picture&lt;/a&gt;&lt;/i&gt;
        &lt;/small&gt;
    &lt;/footer&gt;
&lt;/figure&gt;

&lt;p&gt;A couple of years ago I &lt;a href=&#34;https://retifrav.github.io/blog/2021/08/29/qt-webassembly-custom-opengl/&#34;&gt;compiled&lt;/a&gt; a Qt-based application into WebAssembly using Emscripten, and I did mention pthreads there too, but it was very briefly and without any details. And as it turned out, there are some interesting moments in there which are worth being documented.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Visitors analytics with Microsoft Graph</title>
      <link>https://retifrav.github.io/blog/2022/08/15/visitors-analytics-with-microsoft-graph/</link>
      <pubDate>Mon, 15 Aug 2022 15:50:40 +0200</pubDate>
      
      <guid>https://retifrav.github.io/blog/2022/08/15/visitors-analytics-with-microsoft-graph/</guid>
      <description>&lt;p&gt;Our company uses Office 365 and &lt;a href=&#34;https://azure.microsoft.com/en-us/services/active-directory/&#34;&gt;Azure Active Directory&lt;/a&gt;, which allows us to rely on &lt;a href=&#34;https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-saml-protocol-reference&#34;&gt;SAML SSO&lt;/a&gt; for authenticating company users on our websites. At some point we got curious about what kind of users visit our websites - not quantities but kind of &amp;ldquo;corporate demographics&amp;rdquo;: what is their team/department name, their role/job title, their manager, country where their office is and so on.&lt;/p&gt;


    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2022/08/15/visitors-analytics-with-microsoft-graph/images/microsoft-graph-charts.png&#34; alt=&#34;Microsoft Graph and charts&#34;&gt;

&lt;p&gt;We don&amp;rsquo;t collect any of this data on our websites (&lt;em&gt;we probably could, at least on those where we control the authentication process, but we don&amp;rsquo;t&lt;/em&gt;). The only piece of information that we do have about our visitors (&lt;em&gt;aside from IP-addresses in web-servers access logs&lt;/em&gt;) is their e-mails and GUIDs, thanks to SAML SSO. That might not seem like much, but knowing just the e-mails (&lt;em&gt;or GUIDs&lt;/em&gt;) is actually quite enough, as one can use &lt;a href=&#34;https://docs.microsoft.com/en-us/graph/overview&#34;&gt;Microsoft Graph&lt;/a&gt; to query more data using those. And for the actual analytics purposes that data can then be visualized/presented using &lt;a href=&#34;https://matplotlib.org&#34;&gt;Matplotlib&lt;/a&gt; charts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>LDAP authentication in ASP.NET Core MVC</title>
      <link>https://retifrav.github.io/blog/2022/06/16/dotnet-ldap-authentication/</link>
      <pubDate>Thu, 16 Jun 2022 10:46:05 +0200</pubDate>
      
      <guid>https://retifrav.github.io/blog/2022/06/16/dotnet-ldap-authentication/</guid>
      <description>&lt;p&gt;We needed to make a (&lt;em&gt;yet another&lt;/em&gt;) internal portal/website for employees, but this time, as that would be an internal resource, we decided to utilize users accounts data provided via &lt;a href=&#34;https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol&#34;&gt;LDAP&lt;/a&gt; by our office&amp;rsquo;s &lt;a href=&#34;https://en.wikipedia.org/wiki/Active_Directory&#34;&gt;Active Directory&lt;/a&gt;, instead of (&lt;em&gt;yet again&lt;/em&gt;) implementing &amp;ldquo;local&amp;rdquo; user identities like we did before with &lt;a href=&#34;https://retifrav.github.io/blog/2018/03/20/csharp-dotnet-core-identity-mysql/&#34;&gt;MySQL&lt;/a&gt; and &lt;a href=&#34;https://retifrav.github.io/blog/2020/10/17/dotnet-core-identity-postgresql/&#34;&gt;PostgreSQL&lt;/a&gt;.&lt;/p&gt;


    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2022/06/16/dotnet-ldap-authentication/images/dotnet-core-ldap.png&#34; alt=&#34;.NET Core LDAP&#34;&gt;

&lt;p&gt;(&lt;em&gt;Of course&lt;/em&gt;) we chose &lt;a href=&#34;https://dotnet.microsoft.com/en-us/apps/aspnet&#34;&gt;ASP.NET Core&lt;/a&gt; MVC for making the portal. And as both ASP.NET and Active Directory have been around for a while, and given the fact that both come from the same vendor, one would expect that implementing Active Directory users authentication via LDAP in such a setup to be a well-known topic with detailed documentation, examples and a lot of tutorials available. But as fucking usual, it&amp;rsquo;s not quite like that.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Qt for WebAssembly and custom OpenGL via QQuickFramebufferObject</title>
      <link>https://retifrav.github.io/blog/2021/08/29/qt-webassembly-custom-opengl/</link>
      <pubDate>Sun, 29 Aug 2021 13:30:33 +0200</pubDate>
      
      <guid>https://retifrav.github.io/blog/2021/08/29/qt-webassembly-custom-opengl/</guid>
      <description>&lt;p&gt;It is amazing what kind of crazy ideas people might come up with. One of our users decided that they want to use our visualization engine inside their Qt application on Windows and Linux (&lt;em&gt;so far so good&lt;/em&gt;) and also to build a version for &lt;a href=&#34;https://webassembly.org/&#34;&gt;WebAssembly&lt;/a&gt; to target web-browsers (&lt;em&gt;fucking hell&lt;/em&gt;).&lt;/p&gt;


    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2021/08/29/qt-webassembly-custom-opengl/images/qt-wasm-qquickframebufferobject.png&#34; alt=&#34;Qt, WebAssembly, QQuickFramebufferObject&#34;&gt;

&lt;p&gt;Very surprisingly to me, this actually works!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Azure DevOps Artifacts package promotion</title>
      <link>https://retifrav.github.io/blog/2021/07/21/azure-devops-artifacts-promotion/</link>
      <pubDate>Wed, 21 Jul 2021 14:06:58 +0200</pubDate>
      
      <guid>https://retifrav.github.io/blog/2021/07/21/azure-devops-artifacts-promotion/</guid>
      <description>&lt;p&gt;Some time after we started to publish our packages to &lt;a href=&#34;https://retifrav.github.io/blog/2020/03/05/azure-devops-nuget-npm-cpp/&#34;&gt;Azure DevOps Artifacts&lt;/a&gt;, users told us that they cannot see new versions of the packages until those are &amp;ldquo;&lt;em&gt;promoted to Release view&lt;/em&gt;&amp;rdquo;. And indeed, there is a concept of &amp;ldquo;views&amp;rdquo;, and packages can be &amp;ldquo;promoted&amp;rdquo; to certain views:&lt;/p&gt;


    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2021/07/21/azure-devops-artifacts-promotion/images/package-version-promotion.png&#34; alt=&#34;Azure DevOps Artifacts package version promotion&#34;&gt;

&lt;p&gt;Apparently, that is the case when someone consumes packages not directly from your feed, but from their own feed with your feed being an upstream source.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>New server and remark42 comments</title>
      <link>https://retifrav.github.io/blog/2021/05/30/new-server-and-remark42-comments/</link>
      <pubDate>Sun, 30 May 2021 18:32:54 +0200</pubDate>
      
      <guid>https://retifrav.github.io/blog/2021/05/30/new-server-and-remark42-comments/</guid>
      <description>&lt;p&gt;I decided to move from &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; to my own server with my own domain. Also I switched from commenting system based on &lt;a href=&#34;https://retifrav.github.io/blog/2019/04/19/github-comments-hugo/&#34;&gt;GitHub issues&lt;/a&gt; to &lt;a href=&#34;https://remark42.com/&#34;&gt;remark42&lt;/a&gt; comment engine.&lt;/p&gt;


    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2021/05/30/new-server-and-remark42-comments/images/moving.jpg&#34; alt=&#34;Moving to a new server&#34;&gt;

&lt;p&gt;So the main website and the origin is now on &lt;a href=&#34;https://decovar.dev/&#34;&gt;https://decovar.dev/&lt;/a&gt;, and &lt;a href=&#34;https://retifrav.github.io/&#34;&gt;https://retifrav.github.io/&lt;/a&gt; will continue to exist as a mirror on GitHub Pages.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Let&#39;s Encrypt certificate with acme.sh instead of Certbot</title>
      <link>https://retifrav.github.io/blog/2021/04/05/acme-sh-instead-of-certbot/</link>
      <pubDate>Mon, 05 Apr 2021 13:08:02 +0200</pubDate>
      
      <guid>https://retifrav.github.io/blog/2021/04/05/acme-sh-instead-of-certbot/</guid>
      <description>&lt;p&gt;I needed to set-up a new website with HTTPS and so I took Let&amp;rsquo;s Encrypt procedure from my past &lt;a href=&#34;https://retifrav.github.io/blog/2017/11/28/several-domains-same-server-letsencrypt-tls/#lets-encrypt-certificate&#34;&gt;instructions&lt;/a&gt;. But to my surprise, &lt;a href=&#34;https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx&#34;&gt;Certbot&lt;/a&gt; is installed via &lt;a href=&#34;https://en.wikipedia.org/wiki/Snap_(package_manager)&#34;&gt;Snap&lt;/a&gt; now, which is just retarded. That discovery triggered me to remember that I read about other ways of getting Let&amp;rsquo;s Encrypt certificate, such as &lt;a href=&#34;http://acme.sh/&#34;&gt;acme.sh&lt;/a&gt;.&lt;/p&gt;


    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2021/04/05/acme-sh-instead-of-certbot/images/lets-encrypt-acme.jpg&#34; alt=&#34;acme.sh instead of Certbot&#34; style=&#34;border:1px solid black;&#34;&gt;

&lt;p&gt;On top of that, last month &lt;a href=&#34;https://en.wikipedia.org/wiki/Electronic_Frontier_Foundation&#34;&gt;Electronic Frontier Foundation&lt;/a&gt; (&lt;em&gt;creators of Certbot&lt;/em&gt;) announced that they &lt;a href=&#34;https://www.eff.org/deeplinks/2021/03/statement-re-election-richard-stallman-fsf-board&#34;&gt;have joined&lt;/a&gt; the hounding of Richard Stallman (&lt;em&gt;here&amp;rsquo;s a &lt;a href=&#34;./images/eff-hounding-stallman.png&#34;&gt;screenshot&lt;/a&gt;, &amp;ldquo;just in case&amp;rdquo;&lt;/em&gt;), so now they can go fuck themselves for sure.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gollum - Git-based Markdown wiki</title>
      <link>https://retifrav.github.io/blog/2021/01/07/gollum-markdown-wiki/</link>
      <pubDate>Thu, 07 Jan 2021 13:30:42 +0100</pubDate>
      
      <guid>https://retifrav.github.io/blog/2021/01/07/gollum-markdown-wiki/</guid>
      <description>&lt;p&gt;We needed to create an internal knowledge base, preferably based on a wiki-engine. The requirements were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in-house hosting&lt;/li&gt;
&lt;li&gt;simple maintenance&lt;/li&gt;
&lt;li&gt;no vendor-lock - ideally, storing articles as plain-text files&lt;/li&gt;
&lt;li&gt;customization and styling&lt;/li&gt;
&lt;li&gt;not overloaded with gigabytes of fancy JS-frameworks&lt;/li&gt;
&lt;li&gt;version control&lt;/li&gt;
&lt;li&gt;Markdown markup&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From my own researching and evaluating, there are very few wikis that meet all the requirements, and out of those &lt;a href=&#34;https://en.wikipedia.org/wiki/Gollum_Wiki&#34;&gt;Gollum&lt;/a&gt; seems to be the best.&lt;/p&gt;


    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2021/01/07/gollum-markdown-wiki/images/gollum-markdown.png&#34; alt=&#34;Gollum wiki (original picture: https://www.deviantart.com/aronimo717/art/Hobbit-Gollum-431742580)&#34;&gt;

&lt;p&gt;Even though it has its own &lt;a href=&#34;https://github.com/gollum/gollum/wiki/Installation&#34;&gt;installation guide&lt;/a&gt;, for me that wasn&amp;rsquo;t enough, so here are my guides for Linux and Mac OS, plus some customizing and tweaking.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>.NET Core Identity with PostgreSQL</title>
      <link>https://retifrav.github.io/blog/2020/10/17/dotnet-core-identity-postgresql/</link>
      <pubDate>Sat, 17 Oct 2020 13:32:15 +0200</pubDate>
      
      <guid>https://retifrav.github.io/blog/2020/10/17/dotnet-core-identity-postgresql/</guid>
      <description>&lt;p&gt;A couple of years ago I wrote &lt;a href=&#34;https://retifrav.github.io/blog/2018/03/20/csharp-dotnet-core-identity-mysql/&#34;&gt;a post&lt;/a&gt; about setting up Identity in .NET Core MVC application with MySQL. Now I am starting a new project, and this time I want to try using PostgreSQL.&lt;/p&gt;


    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2020/10/17/dotnet-core-identity-postgresql/images/dotnet-core-identity-postgresql.png&#34; alt=&#34;.NET Core Identity PostgreSQL&#34;&gt;

&lt;p&gt;It is also a good timing to prepare for the upcoming &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/introducing-net-5/&#34;&gt;.NET 5&lt;/a&gt;, which is about to release next month, so I decided to do it with &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/announcing-net-5-0-rc-2/&#34;&gt;.NET 5.0 RC2&lt;/a&gt; right away.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Data compression in IIS, Apache and NGINX</title>
      <link>https://retifrav.github.io/blog/2020/08/12/compression-in-iis-apache-nginx/</link>
      <pubDate>Wed, 12 Aug 2020 15:27:42 +0200</pubDate>
      
      <guid>https://retifrav.github.io/blog/2020/08/12/compression-in-iis-apache-nginx/</guid>
      <description>&lt;p&gt;Some of our users are residing in areas with very slow or/and metered internet connection, so the amount of data transferred is very important to them. And since web servers do support data compression, enabling it can certainly improve the situation for such users.&lt;/p&gt;


    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2020/08/12/compression-in-iis-apache-nginx/images/web-servers-compression.png&#34; alt=&#34;Web servers compression&#34;&gt;

&lt;p&gt;We took IIS, Apache and NGINX and ran some tests to see how compression is configured in each of them and to compare how well do they do it.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
