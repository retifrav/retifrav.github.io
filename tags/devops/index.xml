<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Devops on Declaration of VAR</title>
    <link>https://retifrav.github.io/tags/devops/</link>
    <description>Recent content in Devops on Declaration of VAR</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <copyright>retif</copyright>
    <lastBuildDate>Sun, 06 Feb 2022 14:47:47 +0100</lastBuildDate>
    <atom:link href="https://retifrav.github.io/tags/devops/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Conan and resolving dependencies in a C&#43;&#43; project</title>
      <link>https://retifrav.github.io/blog/2022/02/06/cpp-dependencies-with-conan/</link>
      <pubDate>Sun, 06 Feb 2022 14:47:47 +0100</pubDate>
      <guid>https://retifrav.github.io/blog/2022/02/06/cpp-dependencies-with-conan/</guid>
      <description>&lt;p&gt;Like many other teams, we have a fair amount of 3rd-party dependencies in our project (&lt;em&gt;a C++-based SDK, that is&lt;/em&gt;). Like fewer other teams, we store those dependencies source code right in our project repository and we build them together with the project sources every time. This is of course a tremendous waste of time and CPU cycles, as it would be much more efficient to build dependencies just once (&lt;em&gt;per version&lt;/em&gt;) and link to already pre-built binaries.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&lt;figure class=&#34;with-original&#34;&gt;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2022/02/06/cpp-dependencies-with-conan/images/conan-the-librarian.png&#34; alt=&#34;Conan The Librarian&#34;&gt;&#xD;&#xA;    &lt;footer&gt;&#xD;&#xA;        &lt;small&gt;&#xD;&#xA;            &lt;i&gt;&lt;a href=&#34;https://igorcomics.blogspot.com/2017/11/conan-librarian.html&#34;&gt;original picture&lt;/a&gt;&lt;/i&gt;&#xD;&#xA;        &lt;/small&gt;&#xD;&#xA;    &lt;/footer&gt;&#xD;&#xA;&lt;/figure&gt;&#xD;&#xA;&#xA;&lt;p&gt;But where to store pre-built dependencies and how to fetch the correct variants for various platforms, toolchains and configurations? Our investigation on the matter led us to &lt;a href=&#34;https://conan.io/&#34;&gt;Conan&lt;/a&gt; package manager.&lt;/p&gt;</description>
    </item>
    <item>
      <title>KeePass as internal secrets storage for a team</title>
      <link>https://retifrav.github.io/blog/2022/01/13/keepass-as-internal-secrets-storage/</link>
      <pubDate>Thu, 13 Jan 2022 21:53:34 +0100</pubDate>
      <guid>https://retifrav.github.io/blog/2022/01/13/keepass-as-internal-secrets-storage/</guid>
      <description>&lt;p&gt;For a long time in our team we&amp;rsquo;ve been storing logins, passwords, keys and other things like that in personal password managers or just plain-text files, spread around people&amp;rsquo;s machines, and no one had the full set. Finally, we decided to stop this chaos and start using one common passwords database.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2022/01/13/keepass-as-internal-secrets-storage/images/keepassxc-passwords.png&#34; alt=&#34;Passwords in KeePass XC&#34;&gt;&#xD;&#xA;&#xA;&lt;p&gt;Having evaluated several options, we chose &lt;a href=&#34;https://en.wikipedia.org/wiki/KeePass&#34;&gt;KeePass&lt;/a&gt;. It&amp;rsquo;s not exactly meant for multi-user usage, but we came up with some sort of workaround.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Making a deb package with CMake/CPack and hosting it in a private APT repository</title>
      <link>https://retifrav.github.io/blog/2021/09/23/cmake-cpack-package-deb-apt/</link>
      <pubDate>Thu, 23 Sep 2021 11:26:15 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2021/09/23/cmake-cpack-package-deb-apt/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://retifrav.github.io/blog/2021/03/08/cmake-cpp-library/&#34;&gt;Last time&lt;/a&gt; I needed to handle a C++ library project with CMake. This time I was tasked with creating a deb package for one of the libraries in our SDK.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2021/09/23/cmake-cpack-package-deb-apt/images/cmake-cpack-deb.png&#34; alt=&#34;CMake, CPack, deb package&#34;&gt;&#xD;&#xA;&#xA;&lt;p&gt;And what would you know, CMake can handle packaging too - with &lt;a href=&#34;https://cmake.org/cmake/help/latest/module/CPack.html&#34;&gt;CPack&lt;/a&gt; utility.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Azure DevOps Artifacts package promotion</title>
      <link>https://retifrav.github.io/blog/2021/07/21/azure-devops-artifacts-promotion/</link>
      <pubDate>Wed, 21 Jul 2021 14:06:58 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2021/07/21/azure-devops-artifacts-promotion/</guid>
      <description>&lt;p&gt;Some time after we started to publish our packages to &lt;a href=&#34;https://retifrav.github.io/blog/2020/03/05/azure-devops-nuget-npm-cpp/&#34;&gt;Azure DevOps Artifacts&lt;/a&gt;, users told us that they cannot see new versions of the packages until those are &amp;ldquo;&lt;em&gt;promoted to Release view&lt;/em&gt;&amp;rdquo;. And indeed, there is a concept of &amp;ldquo;views&amp;rdquo;, and packages can be &amp;ldquo;promoted&amp;rdquo; to certain views:&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2021/07/21/azure-devops-artifacts-promotion/images/package-version-promotion.png&#34; alt=&#34;Azure DevOps Artifacts package version promotion&#34;&gt;&#xD;&#xA;&#xA;&lt;p&gt;Apparently, that is the case when someone consumes packages not directly from your feed, but from their own feed with your feed being an upstream source.&lt;/p&gt;</description>
    </item>
    <item>
      <title>New server and Remark42 comments</title>
      <link>https://retifrav.github.io/blog/2021/05/30/new-server-and-remark42-comments/</link>
      <pubDate>Sun, 30 May 2021 18:32:54 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2021/05/30/new-server-and-remark42-comments/</guid>
      <description>&lt;p&gt;I decided to move from &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt; to my own server with my own domain. Also I switched from commenting system based on &lt;a href=&#34;https://retifrav.github.io/blog/2019/04/19/github-comments-hugo/&#34;&gt;GitHub issues&lt;/a&gt; to &lt;a href=&#34;https://remark42.com/&#34;&gt;Remark42&lt;/a&gt; comment engine.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2021/05/30/new-server-and-remark42-comments/images/moving.jpg&#34; alt=&#34;Moving to a new server&#34;&gt;&#xD;&#xA;&#xA;&lt;p&gt;So the main website and the origin is now on &lt;a href=&#34;https://decovar.dev/&#34;&gt;https://decovar.dev/&lt;/a&gt;, and &lt;a href=&#34;https://retifrav.github.io/&#34;&gt;https://retifrav.github.io/&lt;/a&gt; will continue to exist as a mirror on GitHub Pages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Let&#39;s Encrypt certificate with acme.sh instead of Certbot</title>
      <link>https://retifrav.github.io/blog/2021/04/05/acme-sh-instead-of-certbot/</link>
      <pubDate>Mon, 05 Apr 2021 13:08:02 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2021/04/05/acme-sh-instead-of-certbot/</guid>
      <description>&lt;p&gt;I needed to set-up a new website with HTTPS and so I took Let&amp;rsquo;s Encrypt procedure from my past &lt;a href=&#34;https://retifrav.github.io/blog/2017/11/28/several-domains-same-server-letsencrypt-tls/#lets-encrypt-certificate&#34;&gt;instructions&lt;/a&gt;. But to my surprise, &lt;a href=&#34;https://certbot.eff.org/lets-encrypt/ubuntufocal-nginx&#34;&gt;Certbot&lt;/a&gt; is installed via &lt;a href=&#34;https://en.wikipedia.org/wiki/Snap_(package_manager)&#34;&gt;Snap&lt;/a&gt; now, which is just retarded. That discovery triggered me to remember that I read about other ways of getting Let&amp;rsquo;s Encrypt certificate, such as &lt;a href=&#34;http://acme.sh/&#34;&gt;acme.sh&lt;/a&gt;.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2021/04/05/acme-sh-instead-of-certbot/images/lets-encrypt-acme.jpg&#34; alt=&#34;acme.sh instead of Certbot&#34; style=&#34;border:1px solid black;&#34;&gt;&#xD;&#xA;&#xA;&lt;p&gt;On top of that, last month &lt;a href=&#34;https://en.wikipedia.org/wiki/Electronic_Frontier_Foundation&#34;&gt;Electronic Frontier Foundation&lt;/a&gt; (&lt;em&gt;creators of Certbot&lt;/em&gt;) announced that they &lt;a href=&#34;https://www.eff.org/deeplinks/2021/03/statement-re-election-richard-stallman-fsf-board&#34;&gt;have joined&lt;/a&gt; the hounding of Richard Stallman (&lt;em&gt;here&amp;rsquo;s a &lt;a href=&#34;./images/eff-hounding-stallman.png&#34;&gt;screenshot&lt;/a&gt;, &amp;ldquo;just in case&amp;rdquo;&lt;/em&gt;), so now they can go fuck themselves for sure.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Gollum - Git-based Markdown wiki</title>
      <link>https://retifrav.github.io/blog/2021/01/07/gollum-markdown-wiki/</link>
      <pubDate>Thu, 07 Jan 2021 13:30:42 +0100</pubDate>
      <guid>https://retifrav.github.io/blog/2021/01/07/gollum-markdown-wiki/</guid>
      <description>&lt;p&gt;We needed to create an internal knowledge base, preferably based on a wiki-engine. The requirements were:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;in-house hosting&lt;/li&gt;&#xA;&lt;li&gt;simple maintenance&lt;/li&gt;&#xA;&lt;li&gt;no vendor-lock - ideally, storing articles as plain-text files&lt;/li&gt;&#xA;&lt;li&gt;customization and styling&lt;/li&gt;&#xA;&lt;li&gt;not overloaded with gigabytes of fancy JS-frameworks&lt;/li&gt;&#xA;&lt;li&gt;version control&lt;/li&gt;&#xA;&lt;li&gt;Markdown markup&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;From my own researching and evaluating, there are very few wikis that meet all the requirements, and out of those &lt;a href=&#34;https://en.wikipedia.org/wiki/Gollum_Wiki&#34;&gt;Gollum&lt;/a&gt; seems to be the best.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2021/01/07/gollum-markdown-wiki/images/gollum-markdown.png&#34; alt=&#34;Gollum wiki (original picture: https://www.deviantart.com/aronimo717/art/Hobbit-Gollum-431742580)&#34;&gt;&#xD;&#xA;&#xA;&lt;p&gt;Even though it has its own &lt;a href=&#34;https://github.com/gollum/gollum/wiki/Installation&#34;&gt;installation guide&lt;/a&gt;, for me that wasn&amp;rsquo;t enough, so here are my guides for Linux and Mac OS, plus some customizing and tweaking.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Finding optimal 7-Zip parameters for creating a ZIP archive</title>
      <link>https://retifrav.github.io/blog/2020/11/09/7zip-optimal-parameters/</link>
      <pubDate>Mon, 09 Nov 2020 20:01:30 +0100</pubDate>
      <guid>https://retifrav.github.io/blog/2020/11/09/7zip-optimal-parameters/</guid>
      <description>&lt;p&gt;We were packing our builds into ZIP archives for distribution right in TeamCity using its built-in &lt;a href=&#34;https://blog.jetbrains.com/teamcity/2010/02/artifact-packaging-with-teamcity/&#34;&gt;artifact packaging&lt;/a&gt;. But then we decided to try to do that explicitly with &lt;a href=&#34;https://www.7-zip.org/&#34;&gt;7-Zip&lt;/a&gt; as a dedicated build step, and that turned out to be a faster option, providing a better compression ratio too.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2020/11/09/7zip-optimal-parameters/images/7zip-packing.png&#34; alt=&#34;7-Zip packing&#34;&gt;&#xD;&#xA;&#xA;&lt;p&gt;The only question remaining was finding the right balance between compression level and compression time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Data compression in IIS, Apache and NGINX</title>
      <link>https://retifrav.github.io/blog/2020/08/12/compression-in-iis-apache-nginx/</link>
      <pubDate>Wed, 12 Aug 2020 15:27:42 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2020/08/12/compression-in-iis-apache-nginx/</guid>
      <description>&lt;p&gt;Some of our users are residing in areas with very slow or/and metered internet connection, so the amount of data transferred is very important to them. And since web servers do support data compression, enabling it can certainly improve the situation for such users.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2020/08/12/compression-in-iis-apache-nginx/images/web-servers-compression.png&#34; alt=&#34;Web servers compression&#34;&gt;&#xD;&#xA;&#xA;&lt;p&gt;We took IIS, Apache and NGINX and ran some tests to see how compression is configured in each of them and to compare how well do they do it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>TeamCity Prometheus metrics in Grafana</title>
      <link>https://retifrav.github.io/blog/2020/07/14/teamcity-prometheus-metrics-in-grafana/</link>
      <pubDate>Tue, 14 Jul 2020 19:16:58 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2020/07/14/teamcity-prometheus-metrics-in-grafana/</guid>
      <description>&lt;p&gt;Since we added a &lt;a href=&#34;https://grafana.com&#34;&gt;Grafana&lt;/a&gt; instance to our infrastructure, we started visualizing absolutely every single thing with it. So no wonder that eventually we turned our eyes to TeamCity.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2020/07/14/teamcity-prometheus-metrics-in-grafana/images/grafana-teamcity.png&#34; alt=&#34;TeamCity metrics in Grafana&#34;&gt;&#xD;&#xA;&#xA;&lt;p&gt;In &lt;a href=&#34;https://blog.jetbrains.com/teamcity/2019/09/teamcity-2019-2-eap2-is-out/&#34;&gt;2019.2 release&lt;/a&gt; TeamCity started exposing its &lt;a href=&#34;https://www.jetbrains.com/help/teamcity/what-s-new-in-teamcity-2019-2.html#WhatsNewinTeamCity2019.2-Metricsreporting&#34;&gt;metrics&lt;/a&gt; in &lt;a href=&#34;https://prometheus.io&#34;&gt;Prometheus&lt;/a&gt; format, and that&amp;rsquo;s how Grafana can get those, as Prometheus is one of its &lt;a href=&#34;https://grafana.com/docs/grafana/latest/features/datasources/&#34;&gt;supported data sources&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
