<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sql on Declaration of VAR</title>
    <link>https://retifrav.github.io/tags/sql/</link>
    <description>Recent content in sql on Declaration of VAR</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>retif</copyright>
    <lastBuildDate>Sat, 17 Oct 2020 13:32:15 +0200</lastBuildDate>
    <atom:link href="https://retifrav.github.io/tags/sql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>.NET Core Identity with PostgreSQL</title>
      <link>https://retifrav.github.io/blog/2020/10/17/dotnet-core-identity-postgresql/</link>
      <pubDate>Sat, 17 Oct 2020 13:32:15 +0200</pubDate>
      <guid>https://retifrav.github.io/blog/2020/10/17/dotnet-core-identity-postgresql/</guid>
      <description>&lt;p&gt;A couple of years ago I wrote &lt;a href=&#34;https://retifrav.github.io/blog/2018/03/20/csharp-dotnet-core-identity-mysql/&#34;&gt;a post&lt;/a&gt; about setting up Identity in .NET Core MVC application with MySQL. Now I am starting a new project, and this time I want to try using PostgreSQL.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2020/10/17/dotnet-core-identity-postgresql/images/dotnet-core-identity-postgresql.png&#34; alt=&#34;.NET Core Identity PostgreSQL&#34;&gt;&#xD;&#xA;&#xA;&lt;p&gt;It is also a good timing to prepare for the upcoming &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/introducing-net-5/&#34;&gt;.NET 5&lt;/a&gt;, which is about to release next month, so I decided to do it with &lt;a href=&#34;https://devblogs.microsoft.com/dotnet/announcing-net-5-0-rc-2/&#34;&gt;.NET 5.0 RC2&lt;/a&gt; right away.&lt;/p&gt;</description>
    </item>
    <item>
      <title>C# / .NET Core Identity with MySQL</title>
      <link>https://retifrav.github.io/blog/2018/03/20/csharp-dotnet-core-identity-mysql/</link>
      <pubDate>Tue, 20 Mar 2018 22:01:35 +0100</pubDate>
      <guid>https://retifrav.github.io/blog/2018/03/20/csharp-dotnet-core-identity-mysql/</guid>
      <description>&lt;p&gt;Eventually, you will want to restrict access to some/all pages at your .NET Core MVC application, so everyone would have to enter their login and password first (&lt;em&gt;authenticate themselves&lt;/em&gt;), and then server will decide whether to let them open the page or not (&lt;em&gt;authorize the access&lt;/em&gt;).&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?tabs=visual-studio%2Caspnetcore2x&#34;&gt;Official manual&lt;/a&gt; guides you through the process pretty nicely, however it only tells about setting it up with MS SQL Server. But we, of course, would like to use MySQL for that.&lt;/p&gt;&#xA;&#xD;&#xA;&#xD;&#xA;    &lt;img class=&#34;image-post&#34; loading=&#34;lazy&#34; src=&#34;https://retifrav.github.io/blog/2018/03/20/csharp-dotnet-core-identity-mysql/images/dotnet-core-identity-mysql.png&#34; alt=&#34;.NET Core Identity MySQL&#34;&gt;&#xD;&#xA;&#xA;&lt;p&gt;I tried to use MySQL with .NET Core Identity before, but something was really wrong with its support back then, and now it actually works (more or less).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Установка MySQL из архива</title>
      <link>https://retifrav.github.io/blog/2016/03/20/mysql-from-archive/</link>
      <pubDate>Sun, 20 Mar 2016 13:22:08 +0300</pubDate>
      <guid>https://retifrav.github.io/blog/2016/03/20/mysql-from-archive/</guid>
      <description>&lt;p&gt;Я решил, что в интернете недостаточно манулов по установке &lt;strong&gt;MySQL&lt;/strong&gt;, потому написал ещё один про установку в Windows вручную из архива, то есть без инсталлера.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Мониторинг потребления оперативной памяти SQL запросами</title>
      <link>https://retifrav.github.io/blog/2015/01/31/queryramconsumption/</link>
      <pubDate>Sat, 31 Jan 2015 22:35:17 +0300</pubDate>
      <guid>https://retifrav.github.io/blog/2015/01/31/queryramconsumption/</guid>
      <description>&lt;p&gt;В какой-то момент мы обнаружили, что у нас на сервере выполняются SQL-запросы весом по 16 гигабайт. И не просто один, а пачка таких запросов, что поедало всю оперативку на сервере. С этим надо было как-то бороться, а для этого нужно мониторить сервер, чтобы отлавливать момент, когда они появляются. Для этой цели было написано приложение &lt;strong&gt;queryRAMconsumption&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Сразу скажу, что у нас &lt;a href=&#34;https://ru.wikipedia.org/wiki/Microsoft_SQL_Server&#34;&gt;MS SQL Server&lt;/a&gt;, потому всё делалось для него.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Обращение к БД без LINQ</title>
      <link>https://retifrav.github.io/blog/2014/10/26/db-without-linq/</link>
      <pubDate>Sun, 26 Oct 2014 13:28:28 +0300</pubDate>
      <guid>https://retifrav.github.io/blog/2014/10/26/db-without-linq/</guid>
      <description>&lt;p&gt;История пошла в обратную сторону, и теперь проще найти, как выполнять запросы к БД с помощью LINQ, чем как это сделать старым добрым SQL. Помимо этого, в некоторых случая может неслабо сказаться разница в производительности, что я и предлагаю вам рассмотреть далее на конкретных примерах.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Чтение большого CSV и вставка записей в таблицу БД</title>
      <link>https://retifrav.github.io/blog/2014/08/13/insert-from-huge-csv-into-db/</link>
      <pubDate>Wed, 13 Aug 2014 19:22:35 +0400</pubDate>
      <guid>https://retifrav.github.io/blog/2014/08/13/insert-from-huge-csv-into-db/</guid>
      <description>&lt;p&gt;Иногда наступает такая ситуация, когда откуда-нибудь приходит огромаднейший CSV-файл, в котором несколько миллионов (это не преувеличение) строк, и надо его содержимое внести в некоторую таблицу нашей БД.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
